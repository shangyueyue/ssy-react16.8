{"version":3,"sources":["pages/about/AboutPage.js","pages/home/HomePage.js","pages sync /.js$","pages lazy /^/.*$/ groupOptions: {} namespace object","components/ErrorBoundary/ErrorPage.js","components/ErrorBoundary/index.js","layout/index.js","serviceWorker.js","index.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","AboutPage","a","createElement","to","HomePage","map","./about/AboutPage.js","./home/HomePage.js","webpackContext","req","id","webpackContextResolve","o","e","Error","code","keys","Object","resolve","module","exports","./about/AboutPage","./home/HomePage","webpackAsyncContext","Promise","then","ErrorPage","react_default","ErrorBoundary","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","react","ErrorBoundary_ErrorPage","children","React","Component","routes","require","file","pathName","match","filePath","replace","path","component","lazy","concat","layout","components_ErrorBoundary","react_router_dom","fallback","react_router","params","esm_extends","key","exact","Boolean","window","location","hostname","ReactDOM","render","src_layout","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.03665cce.chunk.js","sourcesContent":["import React from 'react';\nimport { Link }from 'react-router-dom';\n\nfunction AboutPage() {\n  return (\n    <div>\n      <h1>this is about</h1>\n      <Link to=\"/\">to home</Link>\n    </div>\n  );\n}\n\nexport default AboutPage;\n","import React from 'react';\nimport { Link }from 'react-router-dom';\n\nfunction HomePage() {\n  return (\n    <div>\n      <h1>this is home page</h1>\n      <Link to=\"/about\">to about</Link>\n    </div>\n  );\n}\n\nexport default HomePage;\n","var map = {\n\t\"./about/AboutPage.js\": 29,\n\t\"./home/HomePage.js\": 30\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 91;","var map = {\n\t\"./about/AboutPage\": 29,\n\t\"./about/AboutPage.js\": 29,\n\t\"./home/HomePage\": 30,\n\t\"./home/HomePage.js\": 30\n};\n\nfunction webpackAsyncContext(req) {\n\treturn Promise.resolve().then(function() {\n\t\tif(!__webpack_require__.o(map, req)) {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t}\n\n\t\tvar id = map[req];\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 96;\nmodule.exports = webpackAsyncContext;","import React from 'react';\n\nfunction ErrorPage() {\n  return (\n    <h1>出现边界错误</h1>\n  );\n}\nexport default ErrorPage;\n","import React, { Fragment } from 'react';\nimport ErrorPage from './ErrorPage';\n\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) { // eslint-disable-line\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) { // eslint-disable-line\n    // You can also log the error to an error reporting service\n    // logErrorToMyService(error, info);\n  }\n\n  render() {\n    return (\n      <Fragment>\n        {\n          this.state.hasError\n            ? <ErrorPage />\n            : this.props.children\n        }\n      </Fragment>\n    );\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Suspense, lazy } from 'react';\nimport path from 'path';\nimport { HashRouter as Router, Switch, Route, Redirect  } from 'react-router-dom';\nimport ErrorBoundary from '@/components/ErrorBoundary';\nconst requireRoutes = require.context('@/pages/',true,/\\.js$/);\nconst routes = requireRoutes.keys().map(file => {\n  const pathName = file.match(/(\\/\\w+)(?=\\.js$)/)[0];\n  const filePath = file.replace(/^\\.\\//, '')\n  return ({\n    path: pathName,\n    component: lazy(()=>import(`@/pages/${filePath}`)),\n  })\n});\n// const routes =[\n//   {\n//     path: '/',\n//     component: lazy(()=>import(/* webpackChunkName: \"home\" */'@/pages/home/HomePage')),\n//   },\n//   {\n//     path: '/about',\n//     component: lazy(()=>import(/* webpackChunkName: \"about\" */'@/pages/about/AboutPage')),\n//   },\n// ]\nfunction layout() {\n  return (\n    <ErrorBoundary>\n      <Router>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            {\n              routes.map(params => <Route key={params.path} exact {...params} />)\n            }\n            {/* <Redirect from=\"/\" to=\"homePage\" /> */}\n          </Switch>\n        </Suspense>\n      </Router>\n    </ErrorBoundary>\n  );\n}\nexport default layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './layout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}